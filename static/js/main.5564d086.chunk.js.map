{"version":3,"sources":["components/NavBar.tsx","components/WrappedRoute.tsx","pm/context/EditorViewProvider.ts","pm/context/Providers.ts","pm/context/EditorContext.ts","components/editor/RightPanel.tsx","components/editor/EditorStore.ts","pm/schema.ts","pm/PMEditor.tsx","pm/plugins.ts","components/editor/Editor.tsx","pages/FrontPage.tsx","routes.tsx","index.tsx"],"names":["NavBar","props","className","Container","Nav","Link","to","exact","activeClassName","styled","div","nav","NavLink","WrappedRoute","Component","component","rest","render","MainWrapper","MainContainer","main","EditorViewProvider","_view","view","this","Error","cmd","state","dispatch","focus","hasFocus","tr","scrollIntoView","toJSON","plugins","rawValue","EditorState","fromJSON","schema","updateState","createDefaultProviders","viewProvider","ReactEditorContext","createContext","useEditorContext","useContext","RightPanel","onClick","execCommand","tbl","nodes","table","create","Array","from","table_row","table_cell","insert","createAndFill","delete","doc","nodeSize","EditorStore","currentEditorState","STORAGE_KEY","setEditorView","hydrateStateFromJSON","syncCurrentEditorState","newState","stateToJSON","localStorage","setItem","JSON","stringify","existing","getItem","length","stored","parse","getCellAttrs","p","dom","celltype","tagName","toLowerCase","colspan","Number","getAttribute","rowspan","placeholder","Schema","content","paragraph","attrs","makeMeRed","default","group","parseDOM","tag","toDOM","el","style","undefined","blockquote","defining","horizontal_rule","heading","level","node","code_block","marks","code","preserveWhitespace","text","image","inline","src","alt","title","draggable","getAttrs","hard_break","selectable","tableRole","isolating","table_body","table_colgroup","priority","tableCellNode","String","table_col","width","tableColNode","link","href","inclusive","italic","bold","fontWeight","test","strikethrough","PMEditor","editorViewRef","useRef","editorRef","ctx","dispatchTransaction","transaction","current","editorState","apply","onEdit","useLayoutEffect","editorViewDOM","element","EditorView","mount","window","editorView","createEditorView","init","onEditorReady","destroy","ref","Editor","editorProviders","useMemo","editorStore","debouncedSync","debounce","Provider","value","ViewGrid","LeftSide","applyDevTools","FrontPage","Routes","basename","process","path","document","getElementById"],"mappings":"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","file":"static/js/main.5564d086.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { RouteComponentProps } from 'react-router'\n\ninterface IProps extends RouteComponentProps<{}> {\n  className?: string\n}\n\nexport const NavBar = (props: IProps) => {\n  const { className} = props\n  return (\n    <Container className={className}>\n      <Nav>\n        <Link to=\"/\" exact activeClassName=\"current\">Front page</Link>\n      </Nav>\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  background: var(--color-primary);\n  box-shadow: 0 0 2px 2px rgba(0,0,0,0.18);\n  padding: 1rem;\n`\nconst Nav = styled.nav`\n  align-items: center;\n  color: #fff;\n  display: flex;\n`\nconst Link = styled(NavLink)`\n  box-sizing: border-box;\n  color: #fff;\n  cursor: pointer;\n  font-size: 1rem;\n  padding: 0.5rem 1rem;\n  text-decoration: none;\n  transition: 0.2s hover;\n  &:hover {\n    text-decoration: underline;\n  }\n  &.current {\n    font-weight: 600;\n  }\n`\n","import * as React from 'react'\nimport { Route, RouteProps, RouteComponentProps } from 'react-router'\nimport styled from 'styled-components'\n\nimport { NavBar } from './NavBar'\n\ntype ReactComponent = React.ComponentClass<any> | React.StatelessComponent<any>\n\ninterface IWrappedRoute extends RouteProps {\n  component: ReactComponent\n}\n\nconst renderNoMainContainerWrapper = (Component: ReactComponent) => (props: RouteComponentProps<any>) =>\n  <MainWrapper>\n    <NavBar {...props}/>\n    <Component {...props}/>\n  </MainWrapper>\n\nconst renderWrapper = (Component: ReactComponent) => (props: RouteComponentProps<any>) =>\n  <MainWrapper>\n    <NavBar {...props}/>\n    <MainContainer>\n      <Component {...props}/>\n    </MainContainer>\n  </MainWrapper>\n\nexport const NoMainContainerRoute = ({ component, ...rest } : IWrappedRoute) =>\n  <Route {...rest} render={renderNoMainContainerWrapper(component)}/>\n\nexport const WrappedRoute = ({ component, ...rest } : IWrappedRoute) =>\n  <Route {...rest} render={renderWrapper(component)}/>\n\nconst MainWrapper = styled.div`\n  min-height: 100vh;\n`\nconst MainContainer = styled.main`\n  margin: 40px auto 0 auto;\n  max-width: 800px;\n  padding-bottom: 20px;\n  @media only screen and (max-width: 720px) {\n    margin: 40px 20px 0 20px;\n    padding-bottom: 20px;\n  }\n`\n","import { EditorView } from 'prosemirror-view'\nimport { EditorState } from 'prosemirror-state'\nimport { ExampleSchema } from '../schema'\n\nimport { Command, JSONEditorState } from '../editor-types'\n\nexport class EditorViewProvider {\n\n  _view?: EditorView<ExampleSchema>\n\n  init(view: EditorView<ExampleSchema>) {\n    this._view = view\n  }\n\n  get view(): EditorView<ExampleSchema> {\n    if (!this._view) {\n      throw Error('EditorViewProvider view accessed without EditorView instance')\n    }\n    return this._view\n  }\n\n  execCommand(cmd: Command) {\n    cmd(this.view.state, this.view.dispatch)\n    this.focus()\n  }\n\n  focus() {\n    if (!this._view || this._view.hasFocus()) {\n      return false\n    }\n    this._view.focus()\n    this._view.dispatch(this._view.state.tr.scrollIntoView())\n    return true\n  }\n  \n  stateToJSON() {\n    const state = this.view.state.toJSON()\n    return { ...state, plugins: [] } as unknown as JSONEditorState\n  }\n\n  hydrateStateFromJSON(rawValue: Object) {\n    const state = EditorState.fromJSON({\n      schema: this.view.state.schema,\n      plugins: this.view.state.plugins,\n    }, rawValue)\n\n    this.view.updateState(state)\n    // Fire an empty transaction to trigger PluginStateProvider to update\n    this.view.dispatch(this.view.state.tr)\n  }\n\n  replaceState(state: EditorState) {\n    this.view.updateState(state)\n    this.view.dispatch(this.view.state.tr)\n  }\n}","import { EditorViewProvider } from './EditorViewProvider'\n\nexport { EditorViewProvider } from './EditorViewProvider'\n\nexport interface IProviders {\n  viewProvider: EditorViewProvider\n}\n\nexport const createDefaultProviders = (): IProviders => {\n  const viewProvider = new EditorViewProvider()\n  return {\n    viewProvider,\n  }\n}\n","import { createContext, useContext } from 'react'\nimport { IProviders, createDefaultProviders } from './Providers'\n\nexport type EditorContext = IProviders\n\nexport const ReactEditorContext = createContext<EditorContext>(createDefaultProviders())\n\nexport const useEditorContext = () => useContext(ReactEditorContext)\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { useEditorContext } from 'pm/context/EditorContext'\n\nexport function RightPanel() {\n  const { viewProvider } = useEditorContext()\n\n  function handleCreateBrokenNode() {\n    viewProvider.execCommand((state, dispatch) => {\n      const tbl = state.schema.nodes.table.create(\n        {},\n        Array.from([1, 2, 3, 4], () =>\n          state.schema.nodes.table_row.create({}, [\n            state.schema.nodes.table_cell.create(),\n            state.schema.nodes.table_cell.create(),\n          ])\n        )\n      )\n      dispatch && dispatch(state.tr.insert(1, tbl))\n      return true\n    })\n  }\n  function handleCreateNode() {\n    viewProvider.execCommand((state, dispatch) => {\n      const tbl = state.schema.nodes.table.createAndFill()\n      dispatch && dispatch(state.tr.insert(1, tbl))\n      return true\n    })\n  }\n  function handleReset() {\n    viewProvider.execCommand((state, dispatch) => {\n      dispatch && dispatch(state.tr.delete(0, state.doc.nodeSize - 2))\n      return true\n    })\n  }\n  return (\n    <Container>\n      <button onClick={handleCreateBrokenNode}>Create broken node</button>\n      <button onClick={handleCreateNode}>Create node</button>\n      <button onClick={handleReset}>Reset</button>\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  button {\n    margin: 0.05rem;\n  }\n`\n","import { EditorViewProvider } from 'pm/context/EditorViewProvider'\n\nexport class EditorStore {\n\n  viewProvider?: EditorViewProvider\n  currentEditorState?: Record<string, any>\n  STORAGE_KEY = 'editor-store'\n\n  constructor() {\n    const existing = localStorage.getItem(this.STORAGE_KEY)\n    if (existing && existing !== null && existing.length > 0) {\n      let stored = JSON.parse(existing)\n      this.currentEditorState = stored\n    }\n  }\n\n  setEditorView = (viewProvider: EditorViewProvider) => {\n    this.viewProvider = viewProvider\n    if (this.currentEditorState) {\n      viewProvider.hydrateStateFromJSON(this.currentEditorState)\n    }\n  }\n\n  syncCurrentEditorState = () => {\n    const newState = this.viewProvider!.stateToJSON()\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(newState))\n  }\n}","import { Schema } from 'prosemirror-model'\n\nexport type Marks = 'bold' | 'code' | 'italic' | 'link' | 'strikethrough'\nexport type Nodes =\n  | 'blockquote'\n  | 'code_block'\n  | 'doc'\n  | 'hard_break'\n  | 'heading'\n  | 'horizontal_rule'\n  | 'image'\n  | 'paragraph'\n  | 'text'\n  | 'table'\n  | 'table_body'\n  | 'table_colgroup'\n  | 'table_row'\n  | 'table_cell'\n  | 'table_col'\n\nexport type ExampleSchema = Schema<Nodes, Marks>\n\nconst getCellAttrs = (p: Node | string) => {\n  const dom = p as HTMLTableCellElement\n\n  const celltype = dom.tagName.toLowerCase()\n  const colspan = Number(dom.getAttribute('colspan') || 1)\n\n  return {\n    celltype,\n    colspan,\n    rowspan: Number(dom.getAttribute('rowspan') || 1),\n    placeholder: dom.getAttribute('data-placeholder-text') || '',\n  }\n}\n\nexport const schema: ExampleSchema = new Schema<Nodes, Marks>({\n  nodes: {\n    // :: NodeSpec The top level document node.\n    doc: {\n      content: 'block+',\n    },\n\n    // :: NodeSpec A plain paragraph textblock. Represented in the DOM\n    // as a `<p>` element.\n    paragraph: {\n      attrs: { makeMeRed: { default: null } },\n      content: 'inline*',\n      group: 'block',\n      parseDOM: [{ tag: 'p' }],\n      toDOM(el) {\n        const attrs = {\n          style: el.attrs.makeMeRed ? 'background: red;' : undefined\n        }\n        return ['p', attrs, 0]\n      },\n    },\n\n    // :: NodeSpec A blockquote (`<blockquote>`) wrapping one or more blocks.\n    blockquote: {\n      attrs: { makeMeRed: { default: null } },\n      content: 'block+',\n      group: 'block',\n      defining: true,\n      parseDOM: [{ tag: 'blockquote' }],\n      toDOM(el) {\n        const attrs = {\n          style: el.attrs.makeMeRed ? 'background: red;' : undefined\n        }\n        return ['blockquote', attrs, 0]\n      },\n    },\n\n    // :: NodeSpec A horizontal rule (`<hr>`).\n    horizontal_rule: {\n      group: 'block',\n      parseDOM: [{ tag: 'hr' }],\n      toDOM() {\n        return ['hr']\n      },\n    },\n\n    // :: NodeSpec A heading textblock, with a `level` attribute that\n    // should hold the number 1 to 6. Parsed and serialized as `<h1>` to\n    // `<h6>` elements.\n    heading: {\n      attrs: { level: { default: 1 } },\n      content: 'inline*',\n      group: 'block',\n      defining: true,\n      parseDOM: [\n        { tag: 'h1', attrs: { level: 1 } },\n        { tag: 'h2', attrs: { level: 2 } },\n        { tag: 'h3', attrs: { level: 3 } },\n        { tag: 'h4', attrs: { level: 4 } },\n        { tag: 'h5', attrs: { level: 5 } },\n        { tag: 'h6', attrs: { level: 6 } },\n      ],\n      toDOM(node) {\n        return ['h' + node.attrs.level, 0]\n      },\n    },\n\n    // :: NodeSpec A code listing. Disallows marks or non-text inline\n    // nodes by default. Represented as a `<pre>` element with a\n    // `<code>` element inside of it.\n    code_block: {\n      content: 'text*',\n      marks: '',\n      group: 'block',\n      code: true,\n      defining: true,\n      parseDOM: [{ tag: 'pre', preserveWhitespace: 'full' }],\n      toDOM() {\n        return ['pre', ['code', 0]]\n      },\n    },\n\n    // :: NodeSpec The text node.\n    text: {\n      group: 'inline',\n    },\n\n    // :: NodeSpec An inline image (`<img>`) node. Supports `src`,\n    // `alt`, and `href` attributes. The latter two default to the empty\n    // string.\n    image: {\n      inline: true,\n      attrs: {\n        src: {},\n        alt: { default: null },\n        title: { default: null },\n      },\n      group: 'inline',\n      draggable: true,\n      parseDOM: [\n        {\n          tag: 'img[src]',\n          getAttrs(p) {\n            const dom = p as HTMLElement\n            return {\n              src: dom.getAttribute('src'),\n              title: dom.getAttribute('title'),\n              alt: dom.getAttribute('alt'),\n            }\n          },\n        },\n      ],\n      toDOM(node) {\n        const { src, alt, title } = node.attrs\n        return ['img', { src, alt, title }]\n      },\n    },\n\n    // :: NodeSpec A hard line break, represented in the DOM as `<br>`.\n    hard_break: {\n      inline: true,\n      group: 'inline',\n      selectable: false,\n      parseDOM: [{ tag: 'br' }],\n      toDOM() {\n        return ['br']\n      },\n    },\n\n    table: {\n      content: 'table_colgroup? table_body',\n      tableRole: 'table',\n      isolating: true,\n      group: 'block',\n      selectable: false,\n      parseDOM: [\n        {\n          tag: 'table',\n        },\n      ],\n      toDOM: () => {\n        return ['table', 0]\n      },\n    },\n\n    table_body: {\n      content: 'table_row{3,}',\n      group: 'block',\n      tableRole: 'tbody',\n      parseDOM: [\n        {\n          tag: 'tbody',\n        },\n      ],\n      toDOM() {\n        return ['tbody', 0]\n      },\n    },\n\n    table_colgroup: {\n      content: 'table_col+',\n      group: 'block',\n      tableRole: 'colgroup',\n      parseDOM: [\n        {\n          tag: 'colgroup',\n        },\n      ],\n      toDOM() {\n        return ['colgroup', 0]\n      },\n    },\n\n    table_row: {\n      content: 'table_cell+',\n      tableRole: 'row',\n      parseDOM: [\n        {\n          tag: 'tr',\n          priority: 80,\n        },\n      ],\n      toDOM: () => {\n        return ['tr', 0]\n      },\n    },\n\n    table_cell: {\n      content: 'inline*',\n      attrs: {\n        celltype: { default: 'td' },\n        colspan: { default: 1 },\n        rowspan: { default: 1 },\n      },\n      tableRole: 'cell',\n      isolating: true,\n      parseDOM: [\n        { tag: 'td', getAttrs: getCellAttrs },\n        { tag: 'th', getAttrs: getCellAttrs },\n      ],\n      toDOM: (node) => {\n        const tableCellNode = node\n    \n        const attrs: { [attr: string]: string } = {}\n        const tag = tableCellNode.attrs.celltype\n    \n        if (tableCellNode.attrs.colspan && tableCellNode.attrs.colspan !== 1) {\n          attrs.colspan = String(tableCellNode.attrs.colspan)\n        }\n    \n        if (tableCellNode.attrs.rowspan && tableCellNode.attrs.rowspan !== 1) {\n          attrs.rowspan = String(tableCellNode.attrs.rowspan)\n        }\n    \n        return [tag, attrs, 0]\n      },\n    },\n    \n    table_col: {\n      attrs: {\n        width: { default: '' },\n      },\n      group: 'block',\n      tableRole: 'col',\n      parseDOM: [\n        {\n          tag: 'col',\n          getAttrs: (p) => {\n            const dom = p as HTMLTableColElement\n            return {\n              width: dom.getAttribute('width'),\n            }\n          },\n        },\n      ],\n      toDOM: (node) => {\n        const tableColNode = node\n    \n        const attrs: { [key: string]: string } = {}\n    \n        if (tableColNode.attrs.width) {\n          attrs['width'] = tableColNode.attrs.width\n        }\n    \n        return ['col', attrs]\n      },\n    },\n  },\n  marks: {\n    // :: MarkSpec A link. Has `href` and `title` attributes. `title`\n    // defaults to the empty string. Rendered and parsed as an `<a>`\n    // element.\n    link: {\n      attrs: {\n        href: {},\n        title: { default: null },\n      },\n      inclusive: false,\n      parseDOM: [\n        {\n          tag: 'a[href]',\n          getAttrs(p) {\n            const dom = p as HTMLElement\n            return {\n              href: dom.getAttribute('href'),\n              title: dom.getAttribute('title'),\n            }\n          },\n        },\n      ],\n      toDOM(node) {\n        const { href, title } = node.attrs\n        return ['a', { href, title }, 0]\n      },\n    },\n\n    // :: MarkSpec An emphasis mark. Rendered as an `<em>` element.\n    // Has parse rules that also match `<i>` and `font-style: italic`.\n    italic: {\n      parseDOM: [{ tag: 'i' }, { tag: 'em' }, { style: 'font-style=italic' }],\n      toDOM() {\n        return ['em', 0]\n      },\n    },\n\n    // :: MarkSpec A strong mark. Rendered as `<strong>`, parse rules\n    // also match `<b>` and `font-weight: bold`.\n    bold: {\n      parseDOM: [\n        { tag: 'strong' },\n        // This works around a Google Docs misbehavior where\n        // pasted content will be inexplicably wrapped in `<b>`\n        // tags with a font-weight normal.\n        {\n          tag: 'b',\n          getAttrs: (p) => {\n            const node = p as HTMLElement\n            return node.style.fontWeight != 'normal' && null\n          },\n        },\n        {\n          style: 'font-weight',\n          getAttrs: (p) => {\n            const value = p as string\n            return /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null\n          },\n        },\n      ],\n      toDOM() {\n        return ['strong', 0]\n      },\n    },\n\n    // :: MarkSpec Code font mark. Represented as a `<code>` element.\n    code: {\n      parseDOM: [{ tag: 'code' }],\n      toDOM() {\n        return ['code', 0]\n      },\n    },\n\n    strikethrough: {\n      parseDOM: [\n        { tag: 's' },\n        { tag: 'strike' },\n        { style: 'text-decoration=line-through' },\n        { style: 'text-decoration-line=line-through' },\n      ],\n      toDOM: () => ['s'],\n    },\n  },\n})\n","import React, { useLayoutEffect, useRef } from 'react'\nimport { EditorView } from 'prosemirror-view'\nimport { EditorState, Transaction } from 'prosemirror-state'\n\nimport { schema } from './schema'\n\nimport { plugins } from './plugins'\n\nimport { EditorContext, useEditorContext } from './context/EditorContext'\nimport { IProviders } from './context/Providers'\n\nimport './styles/editor.css'\nimport './styles/prosemirror-example-setup.css'\nimport './styles/menu.css'\nimport './styles/tables.css'\n\ninterface EditorProps {\n  className?: string\n  onEditorReady?: (providers: IProviders) => void\n  onEdit?: (state: EditorState) => void\n}\n\nexport function PMEditor(props: EditorProps) {\n  const { className = '' } = props\n  const editorViewRef = useRef(null)\n  const editorRef = useRef<EditorView | null>(null)\n  const ctx = useEditorContext()\n\n  useLayoutEffect(() => {\n    const state = createEditorState(ctx)\n    const editorViewDOM = editorViewRef.current\n    if (editorViewDOM) {\n      editorRef.current = createEditorView(editorViewDOM, state)\n      ctx.viewProvider.init(editorRef.current)\n      props.onEditorReady && props?.onEditorReady(ctx)\n    }\n    return () => {\n      editorRef.current?.destroy()\n    }\n  }, [])\n\n  function createEditorState(ctx: EditorContext) {\n    return EditorState.create({\n      schema,\n      plugins: plugins(ctx)\n    })\n  }\n\n  function createEditorView(element: HTMLDivElement, state: EditorState) {\n    const view = new EditorView({ mount: element }, {\n      state,\n      dispatchTransaction,\n    })\n    // @ts-ignore\n    if (window) window.editorView = view\n    return view\n  }\n\n  function dispatchTransaction(transaction: Transaction) {\n    if (!editorRef.current) {\n      return\n    }\n    const oldEditorState = editorRef.current.state\n    const editorState = oldEditorState.apply(transaction)\n    editorRef.current.updateState(editorState)\n    if (props.onEdit) {\n      props.onEdit(editorState)\n    }\n  }\n\n  return (\n    <div ref={editorViewRef} className={className}/>\n  )\n}\n","import { exampleSetup } from 'prosemirror-example-setup'\n\nimport { EditorContext } from 'pm/context/EditorContext'\nimport { schema } from './schema'\n\nexport const plugins = (ctx: EditorContext) => []\n  // exampleSetup({ schema, menuBar: false })\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport debounce from 'lodash.debounce'\n\nimport { applyDevTools } from 'prosemirror-dev-toolkit'\n\nimport { RightPanel } from './RightPanel'\nimport { EditorStore } from './EditorStore'\n\nimport { PMEditor } from 'pm/PMEditor'\nimport { ReactEditorContext } from 'pm/context/EditorContext'\nimport { createDefaultProviders, IProviders } from 'pm/context/Providers'\n\nexport function Editor() {\n  const editorProviders = useMemo(() => createDefaultProviders(), [])\n  const editorStore = useMemo(() => new EditorStore(), [])\n  const debouncedSync = useMemo(() => debounce(editorStore.syncCurrentEditorState, 500), [])\n\n  function handleEdit() {\n    debouncedSync()\n  }\n  function handleEditorReady(ctx: IProviders) {\n    editorStore.setEditorView(ctx.viewProvider)\n    applyDevTools(ctx.viewProvider.view)\n  }\n  return (\n    <ReactEditorContext.Provider value={editorProviders}>\n      <div>\n        <ViewGrid>\n          <LeftSide>\n            <div className=\"pm-editor\">\n              <PMEditor\n                onEdit={handleEdit}\n                onEditorReady={handleEditorReady}\n              />\n            </div>\n          </LeftSide>\n          <RightPanel/>\n        </ViewGrid>\n      </div>\n    </ReactEditorContext.Provider>\n  )\n}\n\nconst ViewGrid = styled.div`\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  grid-template-rows: auto auto;\n  margin-top: 1rem;\n`\nconst LeftSide = styled.div`\n  margin-right: 1rem;\n`","import React from 'react'\nimport styled from 'styled-components'\n\nimport { Editor } from '../components/editor/Editor'\n\nexport function FrontPage() {\n  return (\n    <Container>\n      <header>\n        <h1><a href=\"https://teemukoivisto.github.io/prosemirror-schema-not-enforced-bug/\">\n          ProseMirror schema is not enforced on node creation</a></h1>\n        <p>This can create quite devious bugs...</p>\n        <p><a href=\"https://github.com/TeemuKoivisto/prosemirror-schema-not-enforced-bug\">Github repo</a></p>\n      </header>\n      <Editor/>\n    </Container>\n  )\n}\n\nconst Container = styled.div``\n","import * as React from 'react'\nimport { BrowserRouter, Redirect, Switch } from 'react-router-dom'\n\nimport { WrappedRoute } from './components/WrappedRoute'\n\nimport { FrontPage } from './pages/FrontPage'\n\nexport const Routes = () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <WrappedRoute exact path=\"/\" component={FrontPage}/>\n      <Redirect to=\"/\" />\n    </Switch>\n  </BrowserRouter>\n)\n","import * as React from 'react'\nimport { render } from 'react-dom'\n\nimport { Routes } from './routes'\n\nimport './index.css'\n\nrender(\n  <Routes />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}